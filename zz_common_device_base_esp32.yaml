# zz_common_device_base.yaml: Common code for ESP32 dev boards
# use
# packages:
#   device_base: !include zz_common_device_base.yaml

esphome:
  name: ${device_name}
  name_add_mac_suffix: false
  comment: ${device_description}

esp32:
  board: nodemcu-32s

wifi:
  networks:
  - ssid: !secret wifissid
    password: !secret wifipass
  - ssid: !secret wifissid2
    password: !secret wifipass
  #fast_connect: on #we only have one WiFi AP so just use the first one that matches
  ap: #since we listed an SSID above, this AP mode will only enable if no WiFi connection could be made
    ssid: ${friendly_name}_AP
    password: !secret wifipass

# Enable Captive Portal on the AP mode, to make it easy to change the wifi settings if they fail
captive_portal:

# Enable logging
logger:
#   baud_rate: 0 #disable UART logging since we aren't connected to GPIO1 TX
  level: debug

# Enable Debug component
debug:
  update_interval: 30s

# Enable Home Assistant API
api:

# Enable OTA updates
ota:

# Enable web server
web_server:
  port: 80

# Individual on/off sensors
binary_sensor:

# Reports when the button is pressed
- platform: gpio
  pin:
    number: GPIO0 #"IO0" button on GPIO0
    mode: INPUT_PULLUP
    inverted: True
  name: ${friendly_name} IO0 Button
  on_press:
    - light.toggle: blue_led

# Reports if this device is Connected or not
- platform: status
  name: ${friendly_name} Status
  entity_category: "diagnostic"

# Individual data sensors
sensor:

# Reports the integrated temperature sensor of the ESP32. Some ESP32 variants return a large amount of invalid temperature values. Invalid measurements are ignored by this component.
- platform: internal_temperature
  name: ${friendly_name} Internal Temperature
  filters:
    - lambda: return x * (9.0/5.0) + 32.0;
  unit_of_measurement: °F
  accuracy_decimals: 2
  entity_category: "diagnostic"

# Reports the integrated hall effect sensor of the ESP32 chip to measure the magnitude and direction of magnetic field around the chip (with quite poor accuracy).
# Uses pins GPIO36 and GPIO39 for the internal low-noise amplifier used by the hall sensor.
- platform: esp32_hall
  name: ${friendly_name} ESP32 Hall Sensor
  update_interval: 60s
  entity_category: "diagnostic"

# Reports the WiFi signal strength/RSSI in dB, see https://esphome.io/components/sensor/wifi_signal.html
- platform: wifi_signal
  name: ${friendly_name} Signal
  id: wifi_signal_db
  update_interval: 60s
  entity_category: "diagnostic"

# Reports the WiFi signal strength in %
- platform: copy
  source_id: wifi_signal_db
  name: ${friendly_name} Signal Percent
  filters:
    - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
  unit_of_measurement: "Signal %"
  entity_category: "diagnostic"

# # Reports the WiFi signal strength in %
# - platform: wifi_signal
#   name: ${friendly_name} Signal Percent
#   update_interval: 60s
#   filters:
#     - lambda: |-
#         if (x <= -100) {
#           return 0;
#         } else if (x >= -50) {
#           return 100;
#         } else {
#           return 2 * (x + 100);
#         }
#   unit_of_measurement: "Signal %"

# Reports how long the device has been powered (in minutes)
- platform: uptime
  name: ${friendly_name} Uptime
  filters:
    - lambda: return x / 60.0;
  unit_of_measurement: minutes
  entity_category: "diagnostic"

# Reports program info every 30s
- platform: debug
  free:
    name: ${friendly_name} Heap Free
    entity_category: "diagnostic"
  # fragmentation:
  #   name: ${friendly_name} Heap Fragmentation
  #   entity_category: "diagnostic"
  block:
    name: ${friendly_name} Heap Max Block
    entity_category: "diagnostic"
  loop_time:
    name: ${friendly_name} Loop Time
    entity_category: "diagnostic"

# Individual text sensors
text_sensor:

# Reports the ESPHome Version with compile date
- platform: version
  name: ${friendly_name} ESPHome Version
  entity_category: "diagnostic"

# Reports the reset reason
- platform: debug
  device:
    name: ${friendly_name} Device Info
    entity_category: "diagnostic"
  reset_reason:
    name: ${friendly_name} Reset Reason
    entity_category: "diagnostic"

# Reports the connected WiFi info
- platform: wifi_info
  ip_address:
    name: ${friendly_name} IP Address
    entity_category: "diagnostic"
  ssid:
    name: ${friendly_name} Connected SSID
    entity_category: "diagnostic"
  bssid:
    name: ${friendly_name} Connected BSSID
    entity_category: "diagnostic"
  mac_address:
    name: ${friendly_name} Mac Wifi Address
    entity_category: "diagnostic"

# Output pins
output:
- platform: ledc
  id: blue_led_output
  pin: GPIO2
  inverted: False

# Light devices
light:
- platform: monochromatic
  name: ${friendly_name} Blue LED
  output: blue_led_output
  id: blue_led
  effects:
    - strobe:
    - flicker:
        alpha: 50% #The percentage that the last color value should affect the light. More or less the “forget-factor” of an exponential moving average. Defaults to 95%.
        intensity: 50% #The intensity of the flickering, basically the maximum amplitude of the random offsets. Defaults to 1.5%.
    - lambda:
        name: Throb
        update_interval: 1s
        lambda: |-
          static int state = 0;
          auto call = id(blue_led).turn_on();
          // Transtion of 1000ms = 1s
          call.set_transition_length(1000);
          if (state == 0) {
            call.set_brightness(1.0);
          } else {
            call.set_brightness(0.01);
          }
          call.perform();
          state += 1;
          if (state == 2)
            state = 0;

# Blink the light if we aren't connected to WiFi. Could use https://esphome.io/components/status_led.html instead but then we couldn't use the blue light for other things as well.
interval:
- interval: 500ms
  then:
  - if:
      condition:
        not:
          wifi.connected:
      then:
        - light.turn_on:
            id: blue_led
            brightness: 100%
            transition_length: 0s
        - delay: 250ms
        - light.turn_off:
            id: blue_led
            transition_length: 250ms

#status_led:
#  pin:
#    number: GPIO2
#    inverted: False
#  id: led_status
