# zz_common_device_base.yaml: Common code for ESP8266 devices
# use
# packages:
#   device_base: !include zz_common_device_base.yaml

esphome:
  name: ${device_name}
  name_add_mac_suffix: false
  comment: ${device_description}

esp8266:
  board: esp01_1m

wifi:
  networks:
  - ssid: !secret wifissid
    password: !secret wifipass
  - ssid: !secret wifissid2
    password: !secret wifipass
  #fast_connect: on #we only have one WiFi AP so just use the first one that matches
  ap: #since we listed an SSID above, this AP mode will only enable if no WiFi connection could be made
    ssid: ${friendly_name}_AP
    password: !secret wifipass

# Enable Captive Portal on the AP mode, to make it easy to change the wifi settings if they fail
captive_portal:

# Enable logging
logger:
  baud_rate: 0 #disable UART logging since we aren't connected to GPIO1 TX
  esp8266_store_log_strings_in_flash: False
  level: debug

# Enable Debug component
debug:
  update_interval: 30s

# Enable Home Assistant API
api:

# Enable OTA updates
ota:

# Enable web server
web_server:
  port: 80

# Individual on/off sensors
binary_sensor:

# Reports if this device is Connected or not
- platform: status
  name: ${friendly_name} Status
  entity_category: "diagnostic"

# Individual data sensors
sensor:

# Reports the WiFi signal strength/RSSI in dB, see https://esphome.io/components/sensor/wifi_signal.html
- platform: wifi_signal
  name: ${friendly_name} Signal
  id: wifi_signal_db
  update_interval: 60s
  entity_category: "diagnostic"

# Reports the WiFi signal strength in %
- platform: copy
  source_id: wifi_signal_db
  name: ${friendly_name} Signal Percent
  filters:
    - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
  unit_of_measurement: "Signal %"
  entity_category: "diagnostic"

# # Reports the WiFi signal strength in %
# - platform: wifi_signal
#   name: ${friendly_name} Signal Percent
#   update_interval: 60s
#   filters:
#     - lambda: |-
#         if (x <= -100) {
#           return 0;
#         } else if (x >= -50) {
#           return 100;
#         } else {
#           return 2 * (x + 100);
#         }
#   unit_of_measurement: "Signal %"

# Reports how long the device has been powered (in minutes)
- platform: uptime
  name: ${friendly_name} Uptime
  filters:
    - lambda: return x / 60.0;
  unit_of_measurement: minutes
  entity_category: "diagnostic"

# Reports program info every 30s
- platform: debug
  free:
    name: ${friendly_name} Heap Free
    entity_category: "diagnostic"
  fragmentation:
    name: ${friendly_name} Heap Fragmentation
    entity_category: "diagnostic"
  block:
    name: ${friendly_name} Heap Max Block
    entity_category: "diagnostic"
  loop_time:
    name: ${friendly_name} Loop Time
    entity_category: "diagnostic"

#Uses the ADC to see the VCC, should be around 3.3V
- platform: adc
  pin: VCC
  name: ${friendly_name} VCC Voltage
  entity_category: "diagnostic"

# Individual text sensors
text_sensor:

# Reports the ESPHome Version with compile date
- platform: version
  name: ${friendly_name} ESPHome Version
  entity_category: "diagnostic"

# Reports the reset reason
- platform: debug
  device:
    name: ${friendly_name} Device Info
    entity_category: "diagnostic"
  reset_reason:
    name: ${friendly_name} Reset Reason
    entity_category: "diagnostic"

# Reports the connected WiFi info
- platform: wifi_info
  ip_address:
    name: ${friendly_name} IP Address
    entity_category: "diagnostic"
  ssid:
    name: ${friendly_name} Connected SSID
    entity_category: "diagnostic"
  bssid:
    name: ${friendly_name} Connected BSSID
    entity_category: "diagnostic"
  mac_address:
    name: ${friendly_name} Mac Wifi Address
    entity_category: "diagnostic"

